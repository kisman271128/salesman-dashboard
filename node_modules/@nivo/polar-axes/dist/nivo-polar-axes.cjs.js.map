{"version":3,"file":"nivo-polar-axes.cjs.js","sources":["../src/CircularAxisTick.tsx","../src/CircularAxis.tsx","../src/RadialGrid.tsx","../src/CircularGrid.tsx","../src/RadialAxisTick.tsx","../src/PolarGrid.tsx","../src/RadialAxis.tsx"],"sourcesContent":["import { animated } from '@react-spring/web'\nimport { Text } from '@nivo/text'\nimport { CircularAxisTickProps } from './types'\n\nexport const CircularAxisTick = ({\n    label,\n    theme,\n    animated: animatedProps,\n}: CircularAxisTickProps) => {\n    return (\n        <animated.g opacity={animatedProps.opacity}>\n            <animated.line\n                x1={animatedProps.x1}\n                y1={animatedProps.y1}\n                x2={animatedProps.x2}\n                y2={animatedProps.y2}\n                style={theme.ticks.line}\n            />\n            <Text\n                dx={animatedProps.textX}\n                dy={animatedProps.textY}\n                dominantBaseline=\"central\"\n                style={theme.ticks.text}\n                textAnchor=\"middle\"\n            >\n                {label}\n            </Text>\n        </animated.g>\n    )\n}\n","import { createElement, SVGProps, useMemo } from 'react'\nimport { useSpring, useTransition } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { useExtendedAxisTheme, useTheme } from '@nivo/theming'\nimport { AnyScale, getScaleTicks, centerScale } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\nimport { CircularAxisConfig, CircularAxisTickAnimatedProps } from './types'\nimport { CircularAxisTick } from './CircularAxisTick'\n\ntype CircularAxisProps = {\n    type: 'inner' | 'outer'\n    center?: [number, number]\n    radius: number\n    startAngle: number\n    endAngle: number\n    scale: AnyScale\n} & CircularAxisConfig\n\nconst getLinePositions = (angle: number, innerRadius: number, outerRadius: number) => {\n    const start = positionFromAngle(degreesToRadians(angle), innerRadius)\n    const end = positionFromAngle(degreesToRadians(angle), outerRadius)\n\n    return {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n    }\n}\n\nconst getTextPosition = (angle: number, radius: number) => {\n    const position = positionFromAngle(degreesToRadians(angle), radius)\n\n    return {\n        textX: position.x,\n        textY: position.y,\n    }\n}\n\nexport const CircularAxis = ({\n    type,\n    center = [0, 0],\n    radius,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 12,\n    tickComponent = CircularAxisTick,\n    style,\n}: CircularAxisProps) => {\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const spring = useSpring<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>({\n        radius,\n        startAngle,\n        endAngle,\n        opacity: 1,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n        const angle = 'bandwidth' in scale ? centerScale(scale) : scale\n\n        return values.map((value, index) => ({\n            key: index,\n            label: value,\n            angle: angle(value) - 90,\n        }))\n    }, [scale])\n\n    const outerRadius = type === 'inner' ? radius - tickSize : radius + tickSize\n    const textRadius = type === 'inner' ? outerRadius - tickPadding : outerRadius + tickPadding\n\n    const transition = useTransition<(typeof ticks)[0], CircularAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        from: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        enter: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        update: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        leave: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const theme = useTheme()\n    const axisTheme = useExtendedAxisTheme(theme.axis, style)\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`} style={{ pointerEvents: 'none' }}>\n            <ArcLine\n                animated={spring}\n                {...(axisTheme.domain.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                fill=\"none\"\n            />\n            {transition((animatedProps, tick) =>\n                createElement(tickComponent, {\n                    key: tick.key,\n                    label: tick.label,\n                    theme: axisTheme,\n                    animated: animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\n\nexport interface RadialGridProps {\n    scale: AnyScale\n    ticks?: number | number[]\n    innerRadius: number\n    outerRadius: number\n}\n\nexport const RadialGrid = ({ scale, innerRadius, outerRadius }: RadialGridProps) => {\n    const theme = useTheme()\n\n    const angles = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((angleValue, index) => ({\n            id: index,\n            angle: scale(angleValue) - 90,\n        }))\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; angle: number },\n        { angle: number; opacity: number }\n    >(angles, {\n        keys: item => item.id,\n        initial: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        from: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        update: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, angle) => (\n                <animated.g\n                    key={angle.id}\n                    transform={style.angle.to(v => `rotate(${v})`)}\n                    opacity={style.opacity}\n                >\n                    <line\n                        x1={innerRadius}\n                        x2={outerRadius}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                </animated.g>\n            ))}\n        </>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { AnyScale, TicksSpec, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\n\n/**\n * Angles are expressed in degrees.\n */\nexport interface CircularGridProps {\n    scale: AnyScale\n    ticks?: TicksSpec<any>\n    startAngle: number\n    endAngle: number\n}\n\nexport const CircularGrid = ({\n    scale,\n    ticks,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n}: CircularGridProps) => {\n    const theme = useTheme()\n\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const radii = useMemo(() => {\n        const values = getScaleTicks(scale, ticks)\n\n        return values.map((value, index) => {\n            let radius = scale(value) as number\n            if ('bandwidth' in scale) {\n                radius += scale.bandwidth() / 2\n            }\n\n            return {\n                id: index,\n                radius,\n            }\n        })\n    }, [scale, ticks])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; radius: number },\n        { radius: number; startAngle: number; endAngle: number; opacity: number }\n    >(radii, {\n        keys: item => item.id,\n        initial: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        from: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        update: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, item) => (\n                <ArcLine\n                    key={item.id}\n                    animated={style}\n                    {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                    strokeOpacity={style.opacity}\n                    fill=\"none\"\n                />\n            ))}\n        </>\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { Text } from '@nivo/text'\nimport { RadialAxisTickProps } from './types'\n\nexport const RadialAxisTick = ({\n    label,\n    textAnchor,\n    theme,\n    animated: animatedProps,\n}: RadialAxisTickProps) => {\n    return (\n        <animated.g\n            opacity={animatedProps.opacity}\n            transform={to(\n                [animatedProps.y, animatedProps.rotation],\n                (y, rotation) => `translate(${y}, 0) rotate(${rotation})`\n            )}\n        >\n            <animated.line x2={animatedProps.length} style={theme.ticks.line} />\n            <Text\n                dx={animatedProps.textX}\n                textAnchor={textAnchor}\n                dominantBaseline=\"central\"\n                style={theme.ticks.text}\n            >\n                {label}\n            </Text>\n        </animated.g>\n    )\n}\n","import { AnyScale } from '@nivo/scales'\nimport { RadialGrid } from './RadialGrid'\nimport { CircularGrid, CircularGridProps } from './CircularGrid'\n\nexport interface PolarGridProps {\n    center: [number, number]\n    enableRadialGrid: boolean\n    angleScale: AnyScale\n    startAngle: number\n    endAngle: number\n    enableCircularGrid: boolean\n    radiusScale: AnyScale\n    circularGridTicks?: CircularGridProps['ticks']\n}\n\nexport const PolarGrid = ({\n    center,\n    enableRadialGrid,\n    angleScale,\n    startAngle,\n    endAngle,\n    enableCircularGrid,\n    radiusScale,\n    circularGridTicks,\n}: PolarGridProps) => {\n    const innerRadius = Math.min(...radiusScale.range())\n    const outerRadius = Math.max(...radiusScale.range())\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {enableRadialGrid && (\n                <RadialGrid\n                    scale={angleScale}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                />\n            )}\n            {enableCircularGrid && (\n                <CircularGrid\n                    scale={radiusScale}\n                    ticks={circularGridTicks}\n                    startAngle={startAngle}\n                    endAngle={endAngle}\n                />\n            )}\n        </g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, normalizeAngleDegrees } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { useExtendedAxisTheme, useTheme } from '@nivo/theming'\nimport { RadialAxisConfig, RadialAxisTickAnimatedProps } from './types'\nimport { RadialAxisTick } from './RadialAxisTick'\n\nexport type RadialAxisProps = {\n    center: [number, number]\n    angle: number\n    scale: AnyScale\n    ticksPosition: 'before' | 'after'\n} & RadialAxisConfig\n\nexport const RadialAxis = ({\n    ticksPosition,\n    center,\n    angle: rawAngle,\n    scale,\n    ticks: ticksSpec,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation: extraRotation = 0,\n    tickComponent = RadialAxisTick,\n    style,\n}: RadialAxisProps) => {\n    const angle = normalizeAngleDegrees(rawAngle)\n\n    let textAnchor: 'start' | 'end'\n    let lineX: number\n    let textX: number\n    let tickRotation: number\n\n    if (ticksPosition === 'before') {\n        tickRotation = 90 + extraRotation\n        if (angle <= 90) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        } else if (angle < 270) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n            tickRotation -= 180\n        } else {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        }\n    } else {\n        tickRotation = 90 + extraRotation\n        if (angle < 90) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        } else if (angle < 270) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n            tickRotation -= 180\n        } else {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        }\n    }\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale, ticksSpec)\n\n        return values.map((value, index) => {\n            let position = scale(value) as number\n            if ('bandwidth' in scale) {\n                position += scale.bandwidth() / 2\n            }\n\n            return {\n                key: index,\n                label: value,\n                position,\n            }\n        })\n    }, [scale, ticksSpec])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const spring = useSpring<{ rotation: string }>({\n        rotation: rawAngle - 90,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const transition = useTransition<(typeof ticks)[0], RadialAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        from: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        update: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const theme = useTheme()\n    const axisTheme = useExtendedAxisTheme(theme.axis, style)\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`} style={{ pointerEvents: 'none' }}>\n            <animated.g transform={spring.rotation.to(value => `rotate(${value})`)}>\n                {transition((animatedProps, tick) =>\n                    createElement(tickComponent, {\n                        key: tick.key,\n                        label: tick.label,\n                        y: tick.position,\n                        textX,\n                        rotation: tickRotation,\n                        length: lineX,\n                        textAnchor,\n                        theme: axisTheme,\n                        animated: animatedProps,\n                    })\n                )}\n            </animated.g>\n        </g>\n    )\n}\n"],"names":["CircularAxisTick","_ref","label","theme","animatedProps","animated","_jsxs","jsxs","g","opacity","children","_jsx","line","x1","y1","x2","y2","style","ticks","jsx","Text","dx","textX","dy","textY","dominantBaseline","text","textAnchor","getLinePositions","angle","innerRadius","outerRadius","start","positionFromAngle","degreesToRadians","end","x","y","getTextPosition","radius","position","RadialGrid","scale","useTheme","angles","useMemo","getScaleTicks","map","angleValue","index","id","_useMotionConfig","useMotionConfig","animate","springConfig","config","transition","useTransition","keys","item","initial","from","enter","update","leave","immediate","_Fragment","transform","to","v","_extends","grid","CircularGrid","originalStartAngle","startAngle","originalEndAngle","endAngle","radii","value","bandwidth","ArcLine","strokeOpacity","fill","RadialAxisTick","rotation","length","type","_ref$center","center","_ref$tickSize","tickSize","_ref$tickPadding","tickPadding","_ref$tickComponent","tickComponent","spring","useSpring","values","centerScale","key","textRadius","tick","axisTheme","useExtendedAxisTheme","axis","pointerEvents","domain","createElement","enableRadialGrid","angleScale","enableCircularGrid","radiusScale","circularGridTicks","Math","min","apply","range","max","lineX","tickRotation","ticksPosition","rawAngle","ticksSpec","_ref$tickRotation","extraRotation","normalizeAngleDegrees"],"mappings":"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"}