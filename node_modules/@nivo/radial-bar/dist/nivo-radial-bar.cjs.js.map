{"version":3,"file":"nivo-radial-bar.cjs.js","sources":["../src/RadialBarTooltip.tsx","../src/props.ts","../src/hooks.ts","../src/RadialBarArcs.tsx","../src/RadialBarTracks.tsx","../src/RadialBar.tsx","../src/ResponsiveRadialBar.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { RadialBarDatum, RadialBarTooltipProps } from './types'\n\nexport const RadialBarTooltip = <D extends RadialBarDatum>({ bar }: RadialBarTooltipProps<D>) => {\n    return (\n        <BasicTooltip\n            enableChip\n            id={\n                <span>\n                    {bar.category} - {bar.groupId}\n                </span>\n            }\n            value={bar.formattedValue}\n            color={bar.color}\n        />\n    )\n}\n","import { InheritedColorConfig } from '@nivo/colors'\nimport { ComputedBar, RadialBarLayerId } from './types'\nimport { RadialBarTooltip } from './RadialBarTooltip'\n\nexport const commonDefaultProps = {\n    maxValue: 'auto' as const,\n\n    layers: ['grid', 'tracks', 'bars', 'labels', 'legends'] as RadialBarLayerId[],\n\n    startAngle: 0,\n    endAngle: 270,\n    innerRadius: 0.3,\n    padding: 0.2,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    enableTracks: true,\n    tracksColor: 'rgba(0, 0, 0, .15)',\n\n    enableRadialGrid: true,\n    enableCircularGrid: true,\n    radialAxisStart: {},\n    radialAxisEnd: null,\n    circularAxisInner: null,\n    circularAxisOuter: {},\n\n    colors: { scheme: 'nivo' as const },\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] } as InheritedColorConfig<ComputedBar>,\n\n    enableLabels: false,\n    label: 'formattedValue',\n    labelsSkipAngle: 10,\n    labelsSkipRadius: 0,\n    labelsRadiusOffset: 0.5,\n    labelsTextColor: { theme: 'labels.text.fill' },\n\n    isInteractive: true,\n    tooltip: RadialBarTooltip,\n\n    legends: [],\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n    transitionMode: 'centerRadius' as const,\n\n    renderWrapper: true,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n}\n","import { useMemo } from 'react'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { arc as d3Arc } from 'd3-shape'\nimport { degreesToRadians, useValueFormatter } from '@nivo/core'\nimport { Arc } from '@nivo/arcs'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { castLinearScale, castBandScale, getScaleTicks } from '@nivo/scales'\nimport { commonDefaultProps, svgDefaultProps } from './props'\nimport {\n    ComputedBar,\n    RadialBarCommonProps,\n    RadialBarDataProps,\n    RadialBarCustomLayerProps,\n    RadialBarTrackDatum,\n    RadialBarDatum,\n} from './types'\n\ninterface RadialBarGroup<D extends RadialBarDatum> {\n    id: string\n    total: number\n    data: D[]\n}\n\nexport const useRadialBar = <D extends RadialBarDatum = RadialBarDatum>({\n    data,\n    maxValue: maxValueDirective = svgDefaultProps.maxValue,\n    valueFormat,\n    startAngle = commonDefaultProps.startAngle,\n    endAngle = commonDefaultProps.endAngle,\n    innerRadiusRatio = commonDefaultProps.innerRadius,\n    padding = commonDefaultProps.padding,\n    padAngle = commonDefaultProps.padAngle,\n    cornerRadius = commonDefaultProps.cornerRadius,\n    width,\n    height,\n    colors = commonDefaultProps.colors,\n    tracksColor = commonDefaultProps.tracksColor,\n}: {\n    data: RadialBarDataProps<D>['data']\n    maxValue: RadialBarCommonProps<D>['maxValue']\n    valueFormat?: RadialBarCommonProps<D>['valueFormat']\n    startAngle: RadialBarCommonProps<D>['startAngle']\n    innerRadiusRatio: RadialBarCommonProps<D>['innerRadius']\n    padding: RadialBarCommonProps<D>['padding']\n    padAngle: RadialBarCommonProps<D>['padAngle']\n    cornerRadius: RadialBarCommonProps<D>['cornerRadius']\n    endAngle: RadialBarCommonProps<D>['endAngle']\n    width: number\n    height: number\n    colors: RadialBarCommonProps<D>['colors']\n    tracksColor: RadialBarCommonProps<D>['tracksColor']\n}) => {\n    // using a hook, not because it's costly to compute, but because this is used as\n    // a dependency for other hooks, and otherwise a new array would be created all\n    // the time, forcing recomputing everything.\n    const center: [number, number] = useMemo(() => [width / 2, height / 2], [width, height])\n    const outerRadius = Math.min(...center)\n    const innerRadius = outerRadius * Math.min(innerRadiusRatio, 1)\n\n    const getColor = useOrdinalColorScale<ComputedBar<D>>(colors, 'category')\n\n    // the way categories are being extracted is a bit fragile, because it's extracted from the data,\n    // so if the first group doesn't contain the first expected category for example, then the order\n    // of categories is going to be incorrect.\n    // Maybe we could add an extra sort property, although this might be confusing.\n    const { serieIds, categories, groups, maxValue } = useMemo(() => {\n        const result: {\n            serieIds: string[]\n            categories: string[]\n            groups: RadialBarGroup<D>[]\n            maxValue: number\n        } = {\n            serieIds: [],\n            categories: [],\n            groups: [],\n            maxValue: 0,\n        }\n\n        data.forEach(serie => {\n            result.serieIds.push(serie.id)\n\n            let groupTotalValue = 0\n            serie.data.forEach(datum => {\n                if (!result.categories.includes(datum.x)) {\n                    result.categories.push(datum.x)\n                }\n                groupTotalValue += datum.y\n            })\n\n            result.groups.push({\n                id: serie.id,\n                total: groupTotalValue,\n                data: serie.data,\n            })\n        })\n\n        if (maxValueDirective === 'auto') {\n            result.maxValue = Math.max(...result.groups.map(group => group.total))\n        } else {\n            result.maxValue = maxValueDirective\n        }\n\n        return result\n    }, [data, maxValueDirective])\n\n    const valueScale = useMemo(\n        () =>\n            castLinearScale<number, number>(\n                scaleLinear<number, number>().domain([0, maxValue]).range([startAngle, endAngle])\n            ),\n        [maxValue, startAngle, endAngle]\n    )\n\n    const radiusScale = useMemo(\n        () =>\n            castBandScale<string>(\n                scaleBand<string>()\n                    .domain(serieIds)\n                    .range([innerRadius, outerRadius])\n                    .padding(padding)\n            ),\n        [serieIds, outerRadius, innerRadius, padding]\n    )\n\n    const arcGenerator = useMemo(\n        () =>\n            d3Arc<Arc>()\n                .startAngle(d => d.startAngle)\n                .endAngle(d => d.endAngle)\n                .innerRadius(d => d.innerRadius)\n                .outerRadius(d => d.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(degreesToRadians(padAngle)),\n        [cornerRadius, padAngle]\n    )\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const bars = useMemo(() => {\n        const innerBars: ComputedBar<D>[] = []\n\n        groups.forEach(group => {\n            let currentValue = 0\n            const arcInnerRadius = radiusScale(group.id) as number\n            const arcOuterRadius = arcInnerRadius + radiusScale.bandwidth()\n\n            group.data.forEach(datum => {\n                const stackedValue = currentValue + datum.y\n\n                const computedDatum: ComputedBar<D> = {\n                    id: `${group.id}.${datum.x}`,\n                    data: datum,\n                    groupId: group.id,\n                    category: datum.x,\n                    value: datum.y,\n                    formattedValue: formatValue(datum.y),\n                    color: '',\n                    stackedValue,\n                    arc: {\n                        startAngle: degreesToRadians(valueScale(currentValue)),\n                        endAngle: degreesToRadians(valueScale(stackedValue)),\n                        innerRadius: arcInnerRadius,\n                        outerRadius: arcOuterRadius,\n                    },\n                }\n\n                computedDatum.color = getColor(computedDatum)\n\n                currentValue += datum.y\n\n                innerBars.push(computedDatum)\n            })\n        })\n\n        return innerBars\n    }, [groups, radiusScale, valueScale, getColor, formatValue])\n\n    const startAngleRadians = degreesToRadians(startAngle)\n    const endAngleRadians = degreesToRadians(endAngle)\n\n    const tracks: RadialBarTrackDatum[] = useMemo(() => {\n        return getScaleTicks(radiusScale).map(value => {\n            const trackRadius = radiusScale(value) as number\n\n            return {\n                id: value,\n                color: tracksColor,\n                arc: {\n                    startAngle: startAngleRadians,\n                    endAngle: endAngleRadians,\n                    innerRadius: trackRadius,\n                    outerRadius: trackRadius + radiusScale.bandwidth(),\n                },\n            }\n        })\n    }, [radiusScale, startAngleRadians, endAngleRadians, tracksColor])\n\n    // Given the way categories are extracted, (please see the corresponding hook above),\n    // legends order might be incorrect, also colors are extracted from bars, to avoid\n    // duplicating the colors function, but if the color logic is custom for each bar,\n    // this might lead to weird values for legends.\n    // Maybe we could allow passing custom legend data to fix that.\n    const legendData = useMemo(\n        () =>\n            categories.map(category => {\n                const barWithCategory = bars.find(bar => bar.category === category)\n                const color = barWithCategory ? barWithCategory.color : undefined\n\n                return {\n                    id: category,\n                    label: category,\n                    color,\n                }\n            }),\n        [categories, bars]\n    )\n\n    const customLayerProps: RadialBarCustomLayerProps<D> = useMemo(\n        () => ({\n            center,\n            outerRadius,\n            innerRadius,\n            bars,\n            arcGenerator,\n            radiusScale,\n            valueScale,\n        }),\n        [center, outerRadius, innerRadius, bars, arcGenerator, radiusScale, valueScale]\n    )\n\n    return {\n        center,\n        outerRadius,\n        innerRadius,\n        bars,\n        arcGenerator,\n        radiusScale,\n        valueScale,\n        tracks,\n        legendData,\n        customLayerProps,\n    }\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { ArcsLayer, ArcGenerator } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedBar, RadialBarCommonProps, RadialBarDatum } from './types'\n\ninterface RadialBarArcsProps<D extends RadialBarDatum> {\n    center: [number, number]\n    bars: ComputedBar<D>[]\n    borderWidth: RadialBarCommonProps<D>['borderWidth']\n    borderColor: RadialBarCommonProps<D>['borderColor']\n    arcGenerator: ArcGenerator\n    isInteractive: RadialBarCommonProps<D>['isInteractive']\n    tooltip: RadialBarCommonProps<D>['tooltip']\n    onClick?: RadialBarCommonProps<D>['onClick']\n    onMouseEnter?: RadialBarCommonProps<D>['onMouseEnter']\n    onMouseMove?: RadialBarCommonProps<D>['onMouseMove']\n    onMouseLeave?: RadialBarCommonProps<D>['onMouseLeave']\n    transitionMode: RadialBarCommonProps<D>['transitionMode']\n}\n\nexport const RadialBarArcs = <D extends RadialBarDatum>({\n    center,\n    bars,\n    borderWidth,\n    borderColor,\n    arcGenerator,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n}: RadialBarArcsProps<D>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            onClick?.(bar, event)\n        },\n        [onClick]\n    )\n\n    const handleMouseEnter = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseEnter?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseMove?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(bar, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    return (\n        <ArcsLayer<ComputedBar<D>>\n            center={center}\n            data={bars}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { ArcGenerator, ArcsLayer, ArcTransitionMode } from '@nivo/arcs'\nimport { RadialBarTrackDatum } from './types'\n\ninterface RadialBarTracksProps {\n    center: [number, number]\n    tracks: RadialBarTrackDatum[]\n    arcGenerator: ArcGenerator\n    transitionMode: ArcTransitionMode\n}\n\nexport const RadialBarTracks = ({\n    center,\n    tracks,\n    arcGenerator,\n    transitionMode,\n}: RadialBarTracksProps) => {\n    return (\n        <ArcsLayer<RadialBarTrackDatum>\n            center={center}\n            data={tracks}\n            arcGenerator={arcGenerator}\n            borderWidth={0}\n            borderColor=\"none\"\n            transitionMode={transitionMode}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, forwardRef, Ref, ReactElement } from 'react'\nimport {\n    Container,\n    useDimensions,\n    SvgWrapper,\n    clampArc,\n    // @ts-expect-error no types\n    bindDefs,\n    WithChartRef,\n} from '@nivo/core'\n\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { PolarGrid, RadialAxis, CircularAxis } from '@nivo/polar-axes'\nimport { RadialBarLayerId, RadialBarSvgProps, ComputedBar, RadialBarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { useRadialBar } from './hooks'\nimport { RadialBarArcs } from './RadialBarArcs'\nimport { RadialBarTracks } from './RadialBarTracks'\n\ntype InnerRadialBarProps<D extends RadialBarDatum = RadialBarDatum> = Omit<\n    RadialBarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<SVGSVGElement>\n}\n\nconst InnerRadialBar = <D extends RadialBarDatum>({\n    data,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    startAngle: originalStartAngle = svgDefaultProps.startAngle,\n    endAngle: originalEndAngle = svgDefaultProps.endAngle,\n    innerRadius: innerRadiusRatio = svgDefaultProps.innerRadius,\n    padding = svgDefaultProps.padding,\n    padAngle = svgDefaultProps.padAngle,\n    cornerRadius = svgDefaultProps.cornerRadius,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    enableTracks = svgDefaultProps.enableTracks,\n    tracksColor = svgDefaultProps.tracksColor,\n    enableRadialGrid = svgDefaultProps.enableRadialGrid,\n    enableCircularGrid = svgDefaultProps.enableCircularGrid,\n    radialAxisStart = svgDefaultProps.radialAxisStart,\n    radialAxisEnd = svgDefaultProps.radialAxisEnd,\n    circularAxisInner = svgDefaultProps.circularAxisInner,\n    circularAxisOuter = svgDefaultProps.circularAxisOuter,\n    colors = svgDefaultProps.colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label,\n    labelsSkipAngle = svgDefaultProps.labelsSkipAngle,\n    labelsSkipRadius = svgDefaultProps.labelsSkipRadius,\n    labelsRadiusOffset = svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor = svgDefaultProps.labelsTextColor,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode = svgDefaultProps.transitionMode,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    forwardedRef,\n}: InnerRadialBarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [startAngle, endAngle] = clampArc(originalStartAngle, originalEndAngle)\n\n    const {\n        center,\n        innerRadius,\n        outerRadius,\n        bars,\n        arcGenerator,\n        radiusScale,\n        valueScale,\n        tracks,\n        legendData,\n        customLayerProps,\n    } = useRadialBar<D>({\n        data,\n        maxValue,\n        valueFormat,\n        startAngle,\n        endAngle,\n        innerRadiusRatio,\n        padding,\n        padAngle,\n        cornerRadius,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        tracksColor,\n    })\n\n    const layerById: Record<RadialBarLayerId, ReactNode> = {\n        grid: null,\n        tracks: null,\n        bars: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Fragment key=\"grid\">\n                <PolarGrid\n                    center={center}\n                    enableRadialGrid={enableRadialGrid}\n                    enableCircularGrid={enableCircularGrid}\n                    angleScale={valueScale}\n                    radiusScale={radiusScale}\n                    startAngle={startAngle}\n                    endAngle={endAngle}\n                />\n                {radialAxisStart && (\n                    <RadialAxis\n                        center={center}\n                        angle={Math.min(startAngle, endAngle)}\n                        scale={radiusScale}\n                        ticksPosition=\"before\"\n                        {...radialAxisStart}\n                    />\n                )}\n                {radialAxisEnd && (\n                    <RadialAxis\n                        center={center}\n                        angle={Math.max(startAngle, endAngle)}\n                        scale={radiusScale}\n                        ticksPosition=\"after\"\n                        {...radialAxisEnd}\n                    />\n                )}\n                {circularAxisInner && (\n                    <CircularAxis\n                        type=\"inner\"\n                        center={center}\n                        radius={innerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisInner}\n                    />\n                )}\n                {circularAxisOuter && (\n                    <CircularAxis\n                        type=\"outer\"\n                        center={center}\n                        radius={outerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisOuter}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('tracks') && enableTracks) {\n        layerById.tracks = (\n            <RadialBarTracks\n                key=\"tracks\"\n                center={center}\n                tracks={tracks}\n                arcGenerator={arcGenerator}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <RadialBarArcs<D>\n                key=\"bars\"\n                center={center}\n                bars={bars}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                arcGenerator={arcGenerator}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <ArcLabelsLayer<ComputedBar<D>>\n                key=\"labels\"\n                center={center}\n                data={bars}\n                label={label}\n                radiusOffset={labelsRadiusOffset}\n                skipAngle={labelsSkipAngle}\n                skipRadius={labelsSkipRadius}\n                textColor={labelsTextColor}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const RadialBar = forwardRef(\n    <D extends RadialBarDatum = RadialBarDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...otherProps\n        }: RadialBarSvgProps<D>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerRadialBar<D> isInteractive={isInteractive} {...otherProps} forwardedRef={ref} />\n        </Container>\n    )\n) as <D extends RadialBarDatum = RadialBarDatum>(\n    props: WithChartRef<RadialBarSvgProps<D>, SVGSVGElement>\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { RadialBarDatum, RadialBarSvgProps } from './types'\nimport { RadialBar } from './RadialBar'\n\nexport const ResponsiveRadialBar = forwardRef(\n    <D extends RadialBarDatum = RadialBarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<RadialBarSvgProps<D>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <RadialBar<D> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <D extends RadialBarDatum = RadialBarDatum>(\n    props: WithChartRef<ResponsiveProps<RadialBarSvgProps<D>>, SVGSVGElement>\n) => ReactElement\n"],"names":["commonDefaultProps","maxValue","layers","startAngle","endAngle","innerRadius","padding","padAngle","cornerRadius","enableTracks","tracksColor","enableRadialGrid","enableCircularGrid","radialAxisStart","radialAxisEnd","circularAxisInner","circularAxisOuter","colors","scheme","borderWidth","borderColor","from","modifiers","enableLabels","label","labelsSkipAngle","labelsSkipRadius","labelsRadiusOffset","labelsTextColor","theme","isInteractive","tooltip","_ref","bar","_jsx","BasicTooltip","enableChip","id","_jsxs","jsxs","children","category","groupId","value","formattedValue","color","legends","defs","fill","animate","motionConfig","transitionMode","renderWrapper","svgDefaultProps","_extends","useRadialBar","data","_ref$maxValue","maxValueDirective","valueFormat","_ref$startAngle","_ref$endAngle","_ref$innerRadiusRatio","innerRadiusRatio","_ref$padding","_ref$padAngle","_ref$cornerRadius","width","height","_ref$colors","_ref$tracksColor","center","useMemo","outerRadius","Math","min","apply","getColor","useOrdinalColorScale","_useMemo","result","serieIds","categories","groups","forEach","serie","push","groupTotalValue","datum","includes","x","y","total","max","map","group","valueScale","castLinearScale","scaleLinear","domain","range","radiusScale","castBandScale","scaleBand","arcGenerator","d3Arc","d","degreesToRadians","formatValue","useValueFormatter","bars","innerBars","currentValue","arcInnerRadius","arcOuterRadius","bandwidth","stackedValue","computedDatum","arc","startAngleRadians","endAngleRadians","tracks","getScaleTicks","trackRadius","legendData","barWithCategory","find","undefined","customLayerProps","RadialBarArcs","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","RadialBarTracks","InnerRadialBar","originalStartAngle","originalEndAngle","_ref$innerRadius","partialMargin","margin","_ref$layers","_ref$enableTracks","_ref$enableRadialGrid","_ref$enableCircularGr","_ref$radialAxisStart","_ref$radialAxisEnd","_ref$circularAxisInne","_ref$circularAxisOute","_ref$defs","_ref$fill","_ref$borderWidth","_ref$borderColor","_ref$enableLabels","_ref$label","_ref$labelsSkipAngle","_ref$labelsSkipRadius","_ref$labelsRadiusOffs","_ref$labelsTextColor","_ref$isInteractive","_ref$tooltip","_ref$transitionMode","_ref$legends","role","ariaLabel","ariaLabelledBy","ariaDescribedBy","forwardedRef","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_clampArc","clampArc","_useRadialBar","layerById","grid","labels","Fragment","jsx","PolarGrid","angleScale","RadialAxis","angle","scale","ticksPosition","CircularAxis","type","radius","ArcLabelsLayer","radiusOffset","skipAngle","skipRadius","textColor","length","legend","i","BoxLegendSvg","containerWidth","containerHeight","boundDefs","bindDefs","dataKey","targetKey","SvgWrapper","ref","layer","_layerById$layer","RadialBar","forwardRef","_ref2","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveRadialBar","defaultWidth","defaultHeight","onResize","debounceResize","props","ResponsiveWrapper"],"mappings":"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"}