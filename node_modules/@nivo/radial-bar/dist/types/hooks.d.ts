import { Arc } from '@nivo/arcs';
import { ComputedBar, RadialBarCommonProps, RadialBarDataProps, RadialBarCustomLayerProps, RadialBarTrackDatum, RadialBarDatum } from './types';
export declare const useRadialBar: <D extends RadialBarDatum = RadialBarDatum>({ data, maxValue: maxValueDirective, valueFormat, startAngle, endAngle, innerRadiusRatio, padding, padAngle, cornerRadius, width, height, colors, tracksColor, }: {
    data: RadialBarDataProps<D>["data"];
    maxValue: RadialBarCommonProps<D>["maxValue"];
    valueFormat?: RadialBarCommonProps<D>["valueFormat"];
    startAngle: RadialBarCommonProps<D>["startAngle"];
    innerRadiusRatio: RadialBarCommonProps<D>["innerRadius"];
    padding: RadialBarCommonProps<D>["padding"];
    padAngle: RadialBarCommonProps<D>["padAngle"];
    cornerRadius: RadialBarCommonProps<D>["cornerRadius"];
    endAngle: RadialBarCommonProps<D>["endAngle"];
    width: number;
    height: number;
    colors: RadialBarCommonProps<D>["colors"];
    tracksColor: RadialBarCommonProps<D>["tracksColor"];
}) => {
    center: [number, number];
    outerRadius: number;
    innerRadius: number;
    bars: ComputedBar<D>[];
    arcGenerator: import("d3-shape").Arc<any, Arc>;
    radiusScale: import("@nivo/scales").ScaleBand<string>;
    valueScale: import("@nivo/scales").ScaleLinear<number>;
    tracks: RadialBarTrackDatum[];
    legendData: {
        id: string;
        label: string;
        color: string | undefined;
    }[];
    customLayerProps: RadialBarCustomLayerProps<D>;
};
//# sourceMappingURL=hooks.d.ts.map